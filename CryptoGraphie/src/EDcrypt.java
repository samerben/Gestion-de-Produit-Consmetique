
import static Algorithm.Aes.decrypt;
import static Algorithm.Aes.encrypt;
import Algorithm.HashingWords;
import static Algorithm.HashingWords.getSecurePassword;
import Algorithm.RSA;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sam
 */
public class EDcrypt extends javax.swing.JFrame {
    
    

    /**
     * Creates new form EDcrypt
     */
    public EDcrypt() {
        initComponents();
         
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        encryptedText2 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtEncrypt = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_hash = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultEncrypt = new javax.swing.JTextArea();
        copytxt = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        AES_button_encrypt = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        RSADycrypt = new javax.swing.JButton();
        Des3 = new javax.swing.JButton();
        Aes_decrypt = new javax.swing.JButton();
        Copy = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        dycryptResult1 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        result_hash = new javax.swing.JTextArea();
        Hashing_ = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EDcrypt");
        setLocation(new java.awt.Point(250, 150));

        encryptedText2.setColumns(20);
        encryptedText2.setRows(5);
        jScrollPane1.setViewportView(encryptedText2);

        TxtEncrypt.setColumns(20);
        TxtEncrypt.setRows(5);
        TxtEncrypt.setName("TxtEncrypt"); // NOI18N
        jScrollPane2.setViewportView(TxtEncrypt);

        txt_hash.setColumns(20);
        txt_hash.setRows(5);
        jScrollPane3.setViewportView(txt_hash);

        resultEncrypt.setColumns(20);
        resultEncrypt.setRows(5);
        jScrollPane4.setViewportView(resultEncrypt);

        copytxt.setForeground(new java.awt.Color(255, 0, 0));

        jLabel2.setText("Decryption");
        jLabel2.setFocusTraversalPolicyProvider(true);

        jButton1.setText("RSA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("TripleDes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        AES_button_encrypt.setText("AES");
        AES_button_encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AES_button_encryptActionPerformed(evt);
            }
        });

        jLabel3.setText("Encryption");

        RSADycrypt.setText("RSA");
        RSADycrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RSADycryptActionPerformed(evt);
            }
        });

        Des3.setText("TripleDes");
        Des3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Des3ActionPerformed(evt);
            }
        });

        Aes_decrypt.setText("AES");
        Aes_decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Aes_decryptActionPerformed(evt);
            }
        });

        Copy.setText("Copy");
        Copy.setName(""); // NOI18N
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });

        dycryptResult1.setColumns(20);
        dycryptResult1.setRows(5);
        jScrollPane5.setViewportView(dycryptResult1);

        result_hash.setColumns(20);
        result_hash.setRows(5);
        jScrollPane6.setViewportView(result_hash);

        Hashing_.setText("Hashing");
        Hashing_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Hashing_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(copytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(Copy))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(116, 116, 116)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(RSADycrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(138, 138, 138)
                                        .addComponent(Aes_decrypt)
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Des3)
                                            .addComponent(jLabel2))
                                        .addGap(97, 97, 97))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addComponent(AES_button_encrypt))
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Hashing_, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2)
                                    .addComponent(AES_button_encrypt)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Aes_decrypt)
                                    .addComponent(Des3)
                                    .addComponent(RSADycrypt)
                                    .addComponent(Hashing_))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Copy)
                    .addComponent(copytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        // TODO add your handling code here:

        if(!resultEncrypt.getText().equals(""))
        {resultEncrypt.copy();
        copytxt.setText("Text has been copied ");
        }
        else{
             {
             JOptionPane.showMessageDialog(null, "Nothing has been copied !!");
        }
        }
    }//GEN-LAST:event_CopyActionPerformed

    private void Aes_decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Aes_decryptActionPerformed

        // TODO add your handling code here:
        String plainText ;
        plainText=TxtEncrypt.getText();
        String encrypt_copy;
        encrypt_copy=encryptedText2.getText();

        if(!encryptedText2.getText().equals(""))
        {
            try{

                KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
                keyGenerator.init(128);

                // Generate Key
                SecretKey key = keyGenerator.generateKey();

                // Generating IV.
                byte[] IV = new byte[16];
                SecureRandom random = new SecureRandom();
                random.nextBytes(IV);

                byte[] cipherText = encrypt(plainText.getBytes(),key, IV);

                resultEncrypt.setText(Base64.getEncoder().encodeToString(cipherText));

                String decryptedText = decrypt(cipherText,key, IV);
                dycryptResult1.setText(decryptedText);

            } catch (Exception ex) {
                Logger.getLogger(EDcrypt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else  {
             JOptionPane.showMessageDialog(null, "text area is empty !!");
        }

    }//GEN-LAST:event_Aes_decryptActionPerformed

    private void Des3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Des3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Des3ActionPerformed

    private void RSADycryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RSADycryptActionPerformed
        
           if (!encryptedText2.getText().equals("")) {
        try {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(4096);

            // Generate the KeyPair
            KeyPair keyPair = keyPairGenerator.generateKeyPair();

            // Get the public and private key
            PublicKey publicKey = keyPair.getPublic();
            PrivateKey privateKey = keyPair.getPrivate();
            byte[] cipherTextArray = RSA.encrypt(TxtEncrypt.getText(), publicKey);
            // Decryption
            String decryptedText = RSA.decrypt(cipherTextArray, privateKey);
            dycryptResult1.setText(decryptedText);
        } catch (Exception ex) {
            Logger.getLogger(EDcrypt.class.getName()).log(Level.SEVERE, null, ex);
        }}
           else
            {
             JOptionPane.showMessageDialog(null, "text area is empty !!");
        }
    }//GEN-LAST:event_RSADycryptActionPerformed

    private void AES_button_encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AES_button_encryptActionPerformed
        if (!TxtEncrypt.getText().equals("")) {
            String plainText ;
            plainText=TxtEncrypt.getText();

            try{

                KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
                keyGenerator.init(128);

                // Generate Key
                SecretKey key = keyGenerator.generateKey();

                // Generating IV.
                byte[] IV = new byte[16];
                SecureRandom random = new SecureRandom();
                random.nextBytes(IV);

                System.out.println("Original Text  : "+plainText);

                byte[] cipherText = encrypt(plainText.getBytes(),key, IV);
                System.out.println("Encrypted Text : "+Base64.getEncoder().encodeToString(cipherText) );

                resultEncrypt.setText(Base64.getEncoder().encodeToString(cipherText));

                String decryptedText = decrypt(cipherText,key, IV);

            } catch (Exception ex) {
                Logger.getLogger(EDcrypt.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        else{
              JOptionPane.showMessageDialog(null, "text area is empty !!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_AES_button_encryptActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!TxtEncrypt.getText().equals("")) {
            try {
                KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
                keyPairGenerator.initialize(4096);

                // Generate the KeyPair
                KeyPair keyPair = keyPairGenerator.generateKeyPair();

                // Get the public and private key
                PublicKey publicKey = keyPair.getPublic();
                PrivateKey privateKey = keyPair.getPrivate();
                byte[] cipherTextArray = RSA.encrypt(TxtEncrypt.getText(), publicKey);
                String encryptedText = Base64.getEncoder().encodeToString(cipherTextArray);
                resultEncrypt.setText(encryptedText);
                encryptedText2.setText(encryptedText);
                // Decryption
                String decryptedText = RSA.decrypt(cipherTextArray, privateKey);

            } catch (Exception ex) {
                Logger.getLogger(EDcrypt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
             JOptionPane.showMessageDialog(null, "text area is empty !!");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void Hashing_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Hashing_ActionPerformed
       
        if(!txt_hash.getText().equals(""))
        {
            
        String hash_input=txt_hash.getText();
        try {
            // TODO add your handling code here:
            
            byte[] salt =HashingWords.getSalt();
            String hashing_result = getSecurePassword(hash_input, salt);
            //System.out.println(" Password 1 -> " + password1);
            result_hash.setText(hashing_result);
           
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EDcrypt.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else  {
             JOptionPane.showMessageDialog(null, "text area is empty !!");
        }
    }//GEN-LAST:event_Hashing_ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EDcrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EDcrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EDcrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EDcrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EDcrypt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AES_button_encrypt;
    private javax.swing.JButton Aes_decrypt;
    private javax.swing.JButton Copy;
    private javax.swing.JButton Des3;
    private javax.swing.JButton Hashing_;
    private javax.swing.JButton RSADycrypt;
    private javax.swing.JTextArea TxtEncrypt;
    private javax.swing.JLabel copytxt;
    private javax.swing.JTextArea dycryptResult1;
    private javax.swing.JTextArea encryptedText2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea resultEncrypt;
    private javax.swing.JTextArea result_hash;
    private javax.swing.JTextArea txt_hash;
    // End of variables declaration//GEN-END:variables
}
